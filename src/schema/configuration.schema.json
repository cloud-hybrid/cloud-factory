{
    "title": "configuration",
    "$schema": "http://json-schema.org/draft-07/schema",
    "id": "configuration.schema.json",
    "required": ["tf", "cfn", "cloud", "creator", "service", "environment", "organization", "vcs"],
    "description": "Auto generated JSON schema based on the 'configuration' file",
    "type": "object",
    "properties": {
        "$schema": {
            "$ref": "#/definitions/properties"
        },
        "tf": {
            "type": "string",
            "description": "Terraform Control Indicator",
            "enum": [
                "True",
                "False"
            ], "default": "True"
        },
        "cfn": {
            "type": "string",
            "description": "Cloudformation Control Indicator",
            "enum": [
                "True",
                "False"
            ], "default": "False"
        },
        "cloud": {
            "type": "string",
            "description": "Cloud Provider",
            "enum": [
                "AWS", "Azure", "GCP", "Digital-Ocean", null
            ],
            "default": "AWS"
        },
        "creator": {
            "type": "string",
            "description": "Deployment Initializer, Human or Team-Identifiable Name"
        },
        "service": {
            "$ref": "#/definitions/non-empty-string",
            "description": "Deployment Common-Name or Descriptive Service"
        },
        "environment": {
            "type": "string",
            "description": "Target Deployment Environment",
            "enum": [
                "Development",
                "QA",
                "Staging",
                "UAT",
                "Production"
            ], "default": "Development"
        },
        "organization": {
            "type": "string",
            "default": "Cloud-Technology"
        },
        "vcs": {
            "type": "object",
            "description": "Git Provider",
            "required": [
                "id", "type", "repository"
            ],
            "properties": {
                "id": {
                    "$ref": "#/definitions/non-negative-integer-default",
                    "description": "Repository or Project Identifier"
                },
                "type": {
                    "$ref": "#/definitions/vcs-provider",
                    "description": "Public or Private Git-related System"
                },
                "repository": {
                    "$ref": "#/definitions/non-empty-vcs-url",
                    "description": "Git URI",
                    "format": "uri-reference"
                }
            }
        }
    },
    "definitions": {
        "configuration-schema-array": {
            "type": "array",
            "minItems": 1,
            "items": {"$ref": "#"}
        },
        "non-empty-string": {
            "$comment": "Value Cannot be Empty",
            "type": "string",
            "minLength": 1
        },
        "non-empty-vcs-url": {
            "type": "string",
            "minLength": 1,
            "default": "https://git-vcs.server.io/repository.git"
        },
        "non-negative-integer": {
            "type": "integer",
            "minimum": 0
        },
        "vcs-provider": {
            "type": "string",
            "default": "Gitlab",
            "enum": [
                "Gitlab", "Github"
            ]
        },
        "non-negative-integer-default": {
            "allOf": [
                {
                    "$ref": "#/definitions/non-negative-integer"
                },
                {
                    "default": 0
                }
            ]
        },
        "simple-types": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "string-array": {
            "type": "array",
            "items": {"type": "string"},
            "uniqueItems": true,
            "default": []
        },
        "httpsUrl": {
            "type": "string",
            "pattern": "^https://[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])(:[0-9]*)*([?/#].*)?$",
            "maxLength": 4096
        },
        "jsonPointerArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "string",
                "format": "json-pointer"
            }
        },
        "schema-array": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/properties"
            }
        },
        "properties": {
            "allOf": [
                {
                    "$ref": "#/definitions/validations"
                },
                {
                    "$comment": "The following subset of draft-07 property references is supported for resource definitions. Nested properties are disallowed and should be specified as a $ref to a definitions block.",
                    "type": "object",
                    "properties": {
                        "insertionOrder": {
                            "description": "When set to true, this flag indicates that the order of insertion of the array will be honored, and that changing the order of the array would indicate a diff",
                            "type": "boolean",
                            "default": true
                        },
                        "$ref": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/$ref"
                        },
                        "$comment": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/$comment"
                        },
                        "title": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/title"
                        },
                        "description": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/description"
                        },
                        "examples": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/examples"
                        },
                        "default": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/default"
                        },
                        "multipleOf": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/multipleOf"
                        },
                        "maximum": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/maximum"
                        },
                        "exclusiveMaximum": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/exclusiveMaximum"
                        },
                        "minimum": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/minimum"
                        },
                        "exclusiveMinimum": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/exclusiveMinimum"
                        },
                        "maxLength": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/maxLength"
                        },
                        "minLength": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/minLength"
                        },
                        "pattern": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/pattern"
                        },
                        "items": {
                            "$comment": "Redefined as just a schema. A list of schemas is not allowed",
                            "$ref": "#/definitions/properties",
                            "default": {}
                        },
                        "maxItems": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/maxItems"
                        },
                        "minItems": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/minItems"
                        },
                        "uniqueItems": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/uniqueItems"
                        },
                        "contains": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/contains"
                        },
                        "maxProperties": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/maxProperties"
                        },
                        "minProperties": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/minProperties"
                        },
                        "required": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/required"
                        },
                        "properties": {
                            "type": "object",
                            "patternProperties": {
                                "^[A-Za-z0-9]{1,64}$": {
                                    "$ref": "#/definitions/properties"
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        },
                        "additionalProperties": {
                            "$comment": "All properties of a resource must be expressed in the schema - arbitrary inputs are not allowed",
                            "type": "boolean",
                            "const": false
                        },
                        "patternProperties": {
                            "$comment": "patternProperties allow providers to introduce a specification for key-value pairs, or Map inputs.",
                            "type": "object",
                            "propertyNames": {
                                "format": "regex"
                            }
                        },
                        "dependencies": {
                            "$comment": "Redefined to capture our properties override.",
                            "type": "object",
                            "additionalProperties": {
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/properties"
                                    },
                                    {
                                        "$ref": "http://json-schema.org/draft-07/schema#/definitions/stringArray"
                                    }
                                ]
                            }
                        },
                        "const": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/const"
                        },
                        "enum": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/enum"
                        },
                        "type": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/type"
                        },
                        "format": {
                            "$ref": "http://json-schema.org/draft-07/schema#/properties/format"
                        },
                        "allOf": {
                            "$ref": "#/definitions/schema-array"
                        },
                        "anyOf": {
                            "$ref": "#/definitions/schema-array"
                        },
                        "oneOf": {
                            "$ref": "#/definitions/schema-array"
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "validations": {
            "dependencies": {
                "enum": {
                    "$comment": "Enforce that properties are strongly typed when enum, or const is specified",
                    "required": [
                        "type"
                    ]
                },
                "const": {
                    "required": [
                        "type"
                    ]
                },
                "properties": {
                    "$comment": "An object cannot have both defined and undefined properties; therefore, patternProperties is not allowed when properties is specified.",
                    "not": {
                        "required": [
                            "patternProperties"
                        ]
                    }
                }
            }
        }
    }
}